{"version":3,"sources":["webpack://technologii-truda/./node_modules/photoswipe/dist/photoswipe.esm.js"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","this","_pool","target","type","listener","passive","_toggleListener","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","_this$content$placeho","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","_this$gestures$pswp$e","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","add","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","change","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","click","tapDelay","doubleTapAction","doubleTap","setTimeout","tap","clearTimeout","displacement","cancelAnimationFrame","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resize","i","setAttribute","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","resetPosition","setIsActive","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","removePlaceholder","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","lazyLoad","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","setSlide","removeByIndex","indexToRemove","item","find","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","off","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","getPlaceholderElement","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_listeners","_filters","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","addFilter","removeFilter","args","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","_this$pswp3","_this$_listeners$name2","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","open","_itemHolder$slide","goTo","_this$currSlide","_this$currSlide2","removeAll","_itemHolder$slide2","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","matches","_this$element2","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"mappings":"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","file":"js/255.js","sourcesContent":["/*!\n  * PhotoSwipe 5.4.3 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? `${prop} ${duration}ms ${ease || defaultCSSEasing}` : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode().catch(() => {});\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  /* @ts-ignore */\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\n\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\n\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {Record<Axis, number>} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    this.center =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.max =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.min =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n\n      this._updateAxis('y');\n\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By default, it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\n\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n/**\r\n * Renders and allows to control a single slide\r\n */\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap', 'div');\n    /** @type {HTMLElement | null} */\n\n    this.holderElement = null;\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.heavyAppended = false;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  load() {\n    this.content.load(false);\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\n\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\n\n\n  getPlaceholderElement() {\n    var _this$content$placeho;\n\n    return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\n\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\n\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\n\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    if (!prevZoomLevel) {\n      prevZoomLevel = this.zoomLevels.initial;\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\n\n\n  isPannable() {\n    return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\n\n\n  isZoomable() {\n    return Boolean(this.width) && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\n\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n  /** @returns {string} */\n\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  start() {\n    if (this.pswp.currSlide) {\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    }\n\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (dragAxis === 'y' && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n\n      if (!this.pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        this.pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        if (currSlide) {\n          roundPoint(currSlide.pan);\n          currSlide.applyCurrentZoomPan();\n        }\n      }\n    }\n  }\n\n  end() {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll,\n      currSlide\n    } = this.pswp;\n    let indexDiff = 0;\n    this.pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is visible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched,\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n\n    if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Increasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        this.pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = this.pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    this.pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\n\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = this.pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta || !currSlide) {\n      return false;\n    } // Always move main scroll if image can not be panned\n\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (this.pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/\n          ) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/\n          ) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n\n    return false;\n  } // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\n\n\n  _getVerticalDragRatio(panY) {\n    var _this$pswp$currSlide$, _this$pswp$currSlide;\n\n    return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\n\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startPan = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startZoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._zoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._wasOverFitZoomLevel = false;\n    /** @private */\n\n    this._startZoomLevel = 1;\n  }\n\n  start() {\n    const {\n      currSlide\n    } = this.gestures.pswp;\n\n    if (currSlide) {\n      this._startZoomLevel = currSlide.currZoomLevel;\n      equalizePoints(this._startPan, currSlide.pan);\n    }\n\n    this.gestures.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n\n  end() {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\n\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {\n      return;\n    }\n\n    if (this._zoomPoint.x === 0) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, currSlide.pan);\n    let destinationPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\nfunction didTapOnMainContent(event) {\n  return !!\n  /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  click(point, originalEvent) {\n    const targetClassList =\n    /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    var _this$gestures$pswp$e;\n\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName =\n    /** @type {AddPostfix<Actions, 'Action'>} */\n    actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n\n      case 'zoom':\n        currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);\n        break;\n\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n\n        break;\n\n      case 'toggle-controls':\n        (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y' | null} */\n\n    this.dragAxis = null; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {\n      x: 0,\n      y: 0\n    }; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {\n      x: 0,\n      y: 0\n    }; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.prevP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._lastStartP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._intervalP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @type {Point[]}\r\n     * @private\r\n     */\n\n    this._ongoingPointers = [];\n    /** @private */\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    /** @private */\n\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @private */\n\n    this._intervalTime = 0;\n    /** @private */\n\n    this._velocityCalculated = false;\n    this.isMultitouch = false;\n    this.isDragging = false;\n    this.isZooming = false;\n    /** @type {number | null} */\n\n    this.raf = null;\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\n\n    this._tapTimer = null;\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click',\n      /** @type EventListener */\n      this._onClick.bind(this));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n\n        if (pswp.scrollWrap) {\n          pswp.scrollWrap.ontouchmove = () => {};\n\n          pswp.scrollWrap.ontouchend = () => {};\n        }\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down,\n    /** @type EventListener */\n    this.onPointerDown.bind(this));\n    events.add(window, pref + 'move',\n    /** @type EventListener */\n    this.onPointerMove.bind(this));\n    events.add(window, pref + up,\n    /** @type EventListener */\n    this.onPointerUp.bind(this));\n\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent,\n      /** @type EventListener */\n      this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse'; // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e, 'down');\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerMove(e) {\n    this._preventPointerEventBehaviour(e, 'move');\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n\n        this._updateStartPoints();\n\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else\n        /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n\n      this._updatePrevPoints();\n\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\n\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\n\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _preventPointerEventBehaviour(e, pointerType) {\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\n\n    if (preventPointerEvent) {\n      e.preventDefault();\n    }\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent =\n      /** @type {PointerEvent} */\n      e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPointer => {\n        return ongoingPointer.id === pointerEvent.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n          x: 0,\n          y: 0\n        }));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent =\n      /** @type {TouchEvent} */\n      e;\n      this._numActivePoints = 0;\n\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n\n          this._numActivePoints++;\n\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(\n        /** @type {PointerEvent} */\n        e, this.p1);\n\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\n\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n  /** update points at the start of gesture\r\n   * @private\r\n   */\n\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n\n    this._updatePrevPoints();\n  }\n  /** @private */\n\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\n\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    this.slideWidth = 0;\n    /** @private */\n\n    this._currPositionIndex = 0;\n    /** @private */\n\n    this._prevPositionIndex = 0;\n    /** @private */\n\n    this._containerShiftIndex = -1;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = [];\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\n\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', 'div', this.pswp.container);\n      el.setAttribute('role', 'group');\n      el.setAttribute('aria-roledescription', 'slide');\n      el.setAttribute('aria-hidden', 'true'); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\n\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    return Boolean(diff);\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\n\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\n\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n\n  updateCurrItem() {\n    var _this$itemHolders$;\n\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    /** @type {ItemHolder | undefined} */\n\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n\n        if (tempHolder) {\n          this.itemHolders[2] = tempHolder; // move first to last\n\n          this._containerShiftIndex++;\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n        }\n      } else {\n        tempHolder = this.itemHolders.pop();\n\n        if (tempHolder) {\n          this.itemHolders.unshift(tempHolder); // move last to first\n\n          this._containerShiftIndex--;\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n        }\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n\n    if (pswp.currSlide) {\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\n\n\n  moveTo(x, dragging) {\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      const delta = Math.round(x - this.x);\n\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n\n    this.x = x;\n\n    if (this.pswp.container) {\n      setTransform(this.pswp.container, x);\n    }\n\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging: dragging !== null && dragging !== void 0 ? dragging : false\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\nconst KeyboardKeyCodesMap = {\n  Escape: 27,\n  z: 90,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\n\nconst getKeyboardEventKey = (key, isKeySupported) => {\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\n\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @private */\n\n    this._wasFocused = false;\n    pswp.on('bindEvents', () => {\n      if (pswp.options.trapFocus) {\n        // Dialog was likely opened by keyboard if initial point is not defined\n        if (!pswp.options.initialPointerPos) {\n          // focus causes layout,\n          // which causes lag during the animation,\n          // that's why we delay it until the opener transition ends\n          this._focusRoot();\n        }\n\n        pswp.events.add(document, 'focusin',\n        /** @type EventListener */\n        this._onFocusIn.bind(this));\n      }\n\n      pswp.events.add(document, 'keydown',\n      /** @type EventListener */\n      this._onKeyDown.bind(this));\n    });\n    const lastActiveElement =\n    /** @type {HTMLElement} */\n    document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n  /** @private */\n\n\n  _focusRoot() {\n    if (!this._wasFocused && this.pswp.element) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\n\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe> | undefined} */\n\n\n    let keydownAction;\n    /** @type {'x' | 'y' | undefined} */\n\n    let axis;\n    let isForward = false;\n    const isKeySupported = ('key' in e);\n\n    switch (isKeySupported ? e.key : e.keyCode) {\n      case getKeyboardEventKey('Escape', isKeySupported):\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n\n        break;\n\n      case getKeyboardEventKey('z', isKeySupported):\n        keydownAction = 'toggleZoom';\n        break;\n\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\n        axis = 'x';\n        break;\n\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\n        axis = 'x';\n        isForward = true;\n        break;\n\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\n        isForward = true;\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('Tab', isKeySupported):\n        this._focusRoot();\n\n        break;\n    } // if left/right/top/bottom key\n\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault(); // @ts-ignore\n\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\n\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n\n    if (template && document !== e.target && template !== e.target && !template.contains(\n    /** @type {Node} */\n    e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\n\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\n  constructor(props) {\n    var _props$prop;\n\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish = () => {},\n      duration = 333,\n      easing = DEFAULT_EASING\n    } = props;\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : '';\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    /** @private */\n\n    this._finished = false;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transition won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element property was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n\n    removeTransitionStyle(this._target);\n\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n    this._dampedFrequency = this._naturalFrequency;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n\n    return displacement;\n  }\n\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\n\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\n\nclass SpringAnimation {\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    this._raf = 0;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish = () => {},\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n\n          if (onComplete) {\n            onComplete();\n          }\n\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n\n    this._raf = 0;\n  }\n\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\n\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\n\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\n\n/**\r\n * Manages animations\r\n */\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\n\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\n\n\n  _start(props, isSpring) {\n    const animation = isSpring ? new SpringAnimation(\n    /** @type SpringAnimationProps */\n    props) : new CSSAnimation(\n    /** @type CssAnimationProps */\n    props);\n    this.activeAnimations.push(animation);\n\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel',\n    /** @type EventListener */\n    this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join(\n  /** @type {string} */\n  svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\n\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    var _container;\n\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || `pswp__button--${data.name}`;\n    } else {\n      className += data.className || `pswp__${data.name}`;\n    }\n\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName =\n    /** @type {keyof HTMLElementTagNameMap} */\n    tagName.toLowerCase();\n    /** @type {HTMLElement} */\n\n    const element = createElement(className, tagName);\n\n    if (data.isButton) {\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n\n      if (title) {\n        element.title = title;\n      }\n\n      const ariaText = ariaLabel || title;\n\n      if (ariaText) {\n        element.setAttribute('aria-label', ariaText);\n      }\n    }\n\n    element.innerHTML = addElementHTML(elementHTML);\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          // @ts-ignore\n          pswp[data.onClick]();\n        } else if (typeof data.onClick === 'function') {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n\n    const appendTo = data.appendTo || 'bar';\n    /** @type {HTMLElement | undefined} root element by default */\n\n    let container = pswp.element;\n\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      }\n    }\n\n    (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow'); // TODO: this should point to a unique id for this instance\n\n  element.setAttribute('aria-controls', 'pswp__items');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean | undefined} */\n    let isVisible;\n    /** @type {NodeJS.Timeout | null} */\n\n    let delayTimeout = null;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n\n    const updatePreloaderVisibility = () => {\n      var _pswp$currSlide;\n\n      if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {\n        setIndicatorVisibility(false);\n\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n\n        return;\n      }\n\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          var _pswp$currSlide2;\n\n          setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    if (pswp.ui) {\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\n}\n\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [];\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = () => {};\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\n\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      var _pswp$element;\n\n      (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\n\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\n      return;\n    }\n\n    let {\n      currZoomLevel\n    } = currSlide; // if not open yet - check against initial zoom level\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\n\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n\n  const {\n    element\n  } = itemData;\n  /** @type {Bounds | undefined} */\n\n  let thumbBounds;\n  /** @type {HTMLElement | null | undefined} */\n\n  let thumbnail;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element :\n    /** @type {HTMLElement | null} */\n    element.querySelector(thumbSelector);\n  }\n\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} initialIndex\r\n   */\n\n\n  loadSlideByIndex(initialIndex) {\n    const index = this.pswp.getLoopedIndex(initialIndex); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\n\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n      this.addToCache(content);\n    } // assign slide to content\n\n\n    content.setSlide(slide);\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\n\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n\n    this._cachedItems = [];\n  }\n\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this.isOpen = false;\n    this.isClosing = false;\n    this.isOpening = false;\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\n\n    this._duration = undefined;\n    /** @private */\n\n    this._useAnimation = false;\n    /** @private */\n\n    this._croppedZoom = false;\n    /** @private */\n\n    this._animateRootOpacity = false;\n    /** @private */\n\n    this._animateBgOpacity = false;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\n\n    this._placeholder = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._opacityElement = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._cropContainer1 = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\n\n    this._cropContainer2 = undefined;\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\n\n    this._thumbBounds = undefined;\n    this._prepareOpen = this._prepareOpen.bind(this); // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return;\n    }\n\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n  }\n  /** @private */\n\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n\n      this._applyStartProps();\n    }\n  }\n  /** @private */\n\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = undefined;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = undefined;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());\n\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening && slide) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      var _options$showHideOpac;\n\n      this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;\n    }\n\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      }\n\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      var _this$pswp$currSlide;\n\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;\n\n      if (pswp.container) {\n        pswp.container.style.overflow = 'hidden';\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\n      }\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity && pswp.bg) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n\n        if (pswp.element) {\n          pswp.element.style.opacity = '1';\n        }\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      if (pswp.mainScroll.itemHolders[0]) {\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      }\n\n      if (pswp.mainScroll.itemHolders[2]) {\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n      }\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n  /** @private */\n\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(\n        /** @type {HTMLImageElement} */\n        this._placeholder).finally(() => {\n          decoded = true;\n\n          if (!isDelaying) {\n            resolve(true);\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n\n          if (decoded) {\n            resolve(true);\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n  /** @private */\n\n\n  _initiate() {\n    var _this$pswp$element, _this$pswp$element2;\n\n    (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch(\n    /** @type {'initialZoomIn' | 'initialZoomOut'} */\n    'initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle('pswp--ui-visible', this.isOpening);\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n  /** @private */\n\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch(\n    /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\n    'initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      var _pswp$currSlide;\n\n      if (this._animateZoom && pswp.container) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n\n      (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();\n    }\n  }\n  /** @private */\n\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      if (pswp.currSlide) {\n        pswp.currSlide.zoomAndPanToInitial();\n\n        this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n      }\n    }\n\n    if (this._animateBgOpacity && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n  /** @private */\n\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    } // do not animate opacity if it's already at 0\n\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\n\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    if (currSlide) {\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n      if (animate) {\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n      } else {\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\n\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\n\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PreparedPhotoSwipeOptions} */\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  trapFocus: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    this.options = this._prepareOptions(options || {});\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.viewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * background (backdrop) opacity\r\n     */\n\n    this.bgOpacity = 1;\n    this.currIndex = 0;\n    this.potentialIndex = 0;\n    this.isOpen = false;\n    this.isDestroying = false;\n    this.hasMouse = false;\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\n\n    this._initialItemData = {};\n    /** @type {Bounds | undefined} */\n\n    this._initialThumbBounds = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.topBar = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.template = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.container = undefined;\n    /** @type {HTMLElement | undefined} */\n\n    this.scrollWrap = undefined;\n    /** @type {Slide | undefined} */\n\n    this.currSlide = undefined;\n    this.events = new DOMEvents();\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n  /** @returns {boolean} */\n\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return false;\n    }\n\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n\n    let rootClasses = 'pswp--open';\n\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n\n    if (this.element) {\n      this.element.className += ' ' + rootClasses;\n    }\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      const {\n        itemHolders\n      } = this.mainScroll; // Add content to the previous and next slide\n\n      if (itemHolders[0]) {\n        itemHolders[0].el.style.display = 'block';\n        this.setContent(itemHolders[0], this.currIndex - 1);\n      }\n\n      if (itemHolders[2]) {\n        itemHolders[2].el.style.display = 'block';\n        this.setContent(itemHolders[2], this.currIndex + 1);\n      }\n\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    if (this.mainScroll.itemHolders[1]) {\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    }\n\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\n\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    return clamp(index, 0, numSlides - 1);\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide;\n\n      (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n\n  zoomTo(...args) {\n    var _this$currSlide;\n\n    (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...args);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n\n  toggleZoom() {\n    var _this$currSlide2;\n\n    (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n\n  destroy() {\n    var _this$element;\n\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n    this._listeners = {};\n\n    if (this.scrollWrap) {\n      this.scrollWrap.ontouchmove = null;\n      this.scrollWrap.ontouchend = null;\n    }\n\n    (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide2;\n\n      (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      var _this$currSlide$index, _this$currSlide3;\n\n      let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i;\n\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          var _itemHolder$slide3;\n\n          this.currSlide = itemHolder.slide;\n          (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\n\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n\n      holder.slide.destroy();\n      holder.slide = undefined;\n    } // exit if no loop and index is out of bounds\n\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n  /** @returns {Point} */\n\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\n\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n\n    if (this.bg) {\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      var _this$element2;\n\n      this.hasMouse = true;\n      (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp', 'div');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', 'div', this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\n    this.container = createElement('pswp__container', 'div', this.scrollWrap); // aria pattern: carousel\n\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\n    this.container.setAttribute('aria-live', 'off');\n    this.container.setAttribute('id', 'pswp__items');\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\n\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\n\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\n\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PreparedPhotoSwipeOptions} */\n\n\n    return { ...defaultOptions,\n      ...options\n    };\n  }\n\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"sourceRoot":""}